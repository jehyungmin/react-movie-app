{"version":3,"sources":["MoviePoster.js","MovieGenre.js","Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref","poster1","alt","react_default","a","createElement","src","title","className","MovieGenre","genre","Movie","poster","genres","synopsis","src_MoviePoster","map","index","src_MovieGenre","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","movie","src_Movie_0","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_collApi","sent","setState","stop","this","fetch","then","response","json","data","catch","err","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0SAmBeA,cAfK,SAAAC,GAAsB,IAAnBC,EAAmBD,EAAnBC,QAASC,EAAUF,EAAVE,IAG5B,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAASC,IAAKA,EAAKK,MAAOL,EAAKM,UAAU,oBCKhDC,EAVI,SAAAT,GAAa,IAAXU,EAAWV,EAAXU,MACjB,OACIP,EAAAC,EAAAC,cAAA,QAAMG,UAAU,eAAeE,EAA/B,sBCmDOC,EAlCD,SAAAX,GAAwC,IAArCO,EAAqCP,EAArCO,MAAOK,EAA8BZ,EAA9BY,OAAQC,EAAsBb,EAAtBa,OAAQC,EAAcd,EAAdc,SAGpC,OACIX,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACXL,EAAAC,EAAAC,cAACU,EAAD,CAAad,QAASW,EAAQV,IAAKK,KAEvCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACXL,EAAAC,EAAAC,cAAA,UAAKE,GACLJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACVK,EAAOG,IAAI,SAACN,EAAOO,GAAR,OAAkBd,EAAAC,EAAAC,cAACa,EAAD,CAAYR,MAAOA,EAAOS,IAAKF,OAEjEd,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACPL,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,CACIiB,KAAMP,EACNQ,QAAQ,IACRC,SAAS,uBACTC,WAAS,EACTC,QAAQ,gBCuErBC,6MA1GbC,MAAQ,KAoDRC,cAAgB,WAUd,OATeC,EAAKF,MAAMG,OAAOd,IAAI,SAACe,GAEpC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,CACLzB,MAAOwB,EAAME,cACbrB,OAAQmB,EAAMG,mBACdf,IAAKY,EAAMI,GACXtB,OAAQkB,EAAMlB,OACdC,SAAUiB,EAAMjB,gBAKtBsB,gCAAa,SAAAC,IAAA,IAAAP,EAAA,OAAAQ,EAAAlC,EAAAmC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUb,EAAKc,WADf,OACLb,EADKU,EAAAI,KAEXf,EAAKgB,SAAS,CACXf,WAHQ,wBAAAU,EAAAM,SAAAT,EAAAU,WAebJ,SAAW,WAKT,OAAOK,MAJK,0EAKTC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKtB,SACvBuB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,0FAnF5BC,QAAQC,IAAI,0DAIZD,QAAQC,IAAI,aAuCZT,KAAKX,8CA4CLmB,QAAQC,IAAI,UADL,IAEC1B,EAAWiB,KAAKpB,MAAhBG,OACR,OACE3B,EAAAC,EAAAC,cAAA,OAAKG,UAAWsB,EAAS,MAAQ,eAK9BiB,KAAKpB,MAAMG,OAASiB,KAAKnB,gBAAkB,kBAvGlC6B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.98cf7aae.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Movie.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst MoviePoster = ({ poster1, alt }) => {\r\n    //console.log({ poster1 });\r\n    \r\n    return (\r\n        <div>\r\n            <img src={poster1} alt={alt} title={alt} className=\"Movie_Poster\"/>\r\n        </div>\r\n    );\r\n};\r\n\r\nMoviePoster.propTypes = {\r\n    poster1: PropTypes.string.isRequired,\r\n    alt: PropTypes.string.isRequired\r\n}\r\n\r\nexport default MoviePoster;","import React from 'react';\r\nimport './Movie.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst MovieGenre = ({genre}) => {\r\n    return (\r\n        <span className=\"Movie_Genre\">{genre} </span>\r\n    );\r\n};\r\n\r\nMovieGenre.propTypes = {\r\n    genre: PropTypes.string.isRequired\r\n}\r\n\r\nexport default MovieGenre;","// import React, { Component } from 'react';\r\n// import './Movie.css';\r\n\r\n// class Movie extends Component {\r\n//     render() {\r\n//         return (\r\n//             <div>\r\n//                 <h1>Hello Movie</h1>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n\r\n\r\n// export default Movie;\r\n\r\nimport React from 'react';\r\nimport './Movie.css';\r\nimport MoviePoster from './MoviePoster';\r\nimport PropTypes from 'prop-types';\r\nimport MovieGenre from './MovieGenre';\r\nimport LinesEllipsis from 'react-lines-ellipsis';\r\n\r\nconst Movie = ({ title, poster, genres, synopsis}) => {\r\n\r\n    //console.log({title,poster});\r\n    return (\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie_columns\">\r\n                <MoviePoster poster1={poster} alt={title}/>\r\n            </div>\r\n            <div className=\"Movie_columns\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie_Genres\">\r\n                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\r\n                </div>\r\n                <div className=\"Movie_Synopsis\">\r\n                        <LinesEllipsis\r\n                            text={synopsis}\r\n                            maxLine='4'\r\n                            ellipsis='..더보기'\r\n                            trimRight\r\n                            basedOn='letters'\r\n                            />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nMovie.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.array.isRequired,\r\n    synopsis: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\nclass App extends Component {\n // paging=1;\n\n  state = {\n    \n  }\n\n  componentWillMount() {\n    console.log('will mount')\n  }\n\n  componentDidMount() {\n    console.log('did mount');\n    // setTimeout(() => {\n    //   this.setState({\n    //     greeting: 'hello again!'\n    //   });\n\n    // }, 5000);\n\n    //setTimeout(() => {\n    //   console.log('hello');\n    //   this.setState({\n    //     movies: [\n    //       {\n    //         title: \"movie1\",\n    //         poster: \"http://image.kmib.co.kr/online_image/2018/0906/611211110012661971_5.jpg\"\n    //       },\n    //       {\n    //         title: \"movie2\",\n    //         poster: \"http://image.kmib.co.kr/online_image/2018/0906/611211110012661971_5.jpg\"\n    //       },\n    //       {\n    //         title: \"movie3\",\n    //         poster: \"http://image.kmib.co.kr/online_image/2018/0906/611211110012661971_5.jpg\"\n    //       },\n    //       {\n    //         title: \"movie4\",\n    //         poster: \"http://image.kmib.co.kr/online_image/2018/0906/611211110012661971_5.jpg\"\n    //       },\n    //       {\n    //         title: \"movie5\",\n    //         poster: \"http://image.kmib.co.kr/online_image/2018/0906/611211110012661971_5.jpg\"\n    //       },\n    //       {\n    //         title: \"add movie\",\n    //         poster: \"https://img.insight.co.kr/static/2018/09/12/700/7m19bv2u03s1j3651r4r.jpg\"\n    //       }\n    //     ]\n    //   })\n    // }, 1000);\n    this._getMovies();\n\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map((movie) => {\n      //console.log(movie)\n      return <Movie\n        title={movie.title_english}\n        poster={movie.medium_cover_image}\n        key={movie.id}\n        genres={movie.genres}\n        synopsis={movie.synopsis} />\n    })\n    return movies;\n  }\n\n  _getMovies = async () => {\n    const movies = await this._collApi();\n    this.setState({\n       movies\n    });\n  }\n\n  // hendleIncrement = () => {\n  //   return ++this.paging;\n  // }\n\n  // hendleDncrement = () => {\n  //   return --this.paging;\n  // }\n\n  _collApi = () => {\n    const url = 'https://yts.am/api/v2/list_movies.json?sort by=download_count&limit=50';\n    //const page = '&page=';\n    //const urlPage = url + page;\n\n    return fetch(url)\n      .then(response => response.json())\n      .then(json => json.data.movies)\n      .catch(err => console.log(err))\n  }\n\n  render() {\n    console.log('render')\n    const { movies } = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App-loading\"}>\n        {/* {this.state.greeting} */}\n        {/* {this.state.movies.map((movie, index) => {\n          return <Movie title={movie.title} poster = { movie.poster } key={index}/>\n        })} */}\n        {this.state.movies ? this._renderMovies() : 'logding'}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}